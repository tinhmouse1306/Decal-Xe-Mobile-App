package com.example.decalxeandroid.presentation.services

import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.decalxeandroid.domain.model.DecalService
import com.example.decalxeandroid.domain.model.Result
import com.example.decalxeandroid.domain.repository.DecalServiceRepository
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

class CreateServiceViewModel(
    private val serviceRepository: DecalServiceRepository
) : ViewModel() {
    
    companion object {
        private const val TAG = "CreateServiceViewModel"
    }

    private val _uiState = MutableStateFlow(CreateServiceUiState())
    val uiState: StateFlow<CreateServiceUiState> = _uiState.asStateFlow()

    fun updateServiceName(name: String) {
        _uiState.value = _uiState.value.copy(serviceName = name)
        validateForm()
    }

    fun updateDescription(description: String) {
        _uiState.value = _uiState.value.copy(description = description)
    }

    fun updatePrice(priceText: String) {
        val price = priceText.toDoubleOrNull() ?: 0.0
        _uiState.value = _uiState.value.copy(
            price = price,
            priceText = priceText
        )
        validateForm()
    }

    fun updateStandardWorkUnits(unitsText: String) {
        val units = unitsText.toIntOrNull() ?: 0
        _uiState.value = _uiState.value.copy(
            standardWorkUnits = units,
            standardWorkUnitsText = unitsText
        )
    }

    fun updateDecalTemplateId(templateId: String) {
        _uiState.value = _uiState.value.copy(decalTemplateId = templateId)
        validateForm()
    }

    private fun validateForm() {
        val state = _uiState.value
        val isValid = state.serviceName.isNotBlank() && 
                     state.price > 0 && 
                     state.decalTemplateId.isNotBlank()
        
        _uiState.value = state.copy(isFormValid = isValid)
    }

    fun createService() {
        if (!_uiState.value.isFormValid) return
        
        viewModelScope.launch {
            try {
                Log.d(TAG, "Creating service: ${_uiState.value.serviceName}")
                _uiState.value = _uiState.value.copy(isLoading = true, error = null)

                val service = DecalService(
                    serviceId = "", // Will be generated by API
                    serviceName = _uiState.value.serviceName.trim(),
                    description = _uiState.value.description.trim().takeIf { it.isNotEmpty() },
                    price = _uiState.value.price,
                    standardWorkUnits = _uiState.value.standardWorkUnits.takeIf { it > 0 },
                    decalTemplateId = _uiState.value.decalTemplateId.trim(),
                    decalTemplateName = null,
                    decalTypeName = null
                )

                serviceRepository.createService(service).collect { result ->
                    when (result) {
                        is Result.Success -> {
                            Log.d(TAG, "Service created successfully: ${result.data.serviceId}")
                            _uiState.value = _uiState.value.copy(
                                isLoading = false,
                                isSuccess = true
                            )
                        }
                        is Result.Error -> {
                            Log.e(TAG, "Failed to create service: ${result.message}")
                            _uiState.value = _uiState.value.copy(
                                isLoading = false,
                                error = result.message
                            )
                        }
                        else -> {
                            Log.e(TAG, "Unknown error creating service")
                            _uiState.value = _uiState.value.copy(
                                isLoading = false,
                                error = "Unknown error creating service"
                            )
                        }
                    }
                }
            } catch (e: Exception) {
                Log.e(TAG, "Error creating service", e)
                val errorMessage = when {
                    e.message?.contains("400") == true -> "Dữ liệu không hợp lệ. Vui lòng kiểm tra lại thông tin."
                    e.message?.contains("404") == true -> "Template ID không tồn tại."
                    e.message?.contains("Network") == true -> "Lỗi kết nối mạng. Vui lòng thử lại."
                    else -> "Không thể tạo dịch vụ: ${e.message}"
                }
                
                _uiState.value = _uiState.value.copy(
                    isLoading = false,
                    error = errorMessage
                )
            }
        }
    }

    fun clearError() {
        _uiState.value = _uiState.value.copy(error = null)
    }

    fun resetForm() {
        _uiState.value = CreateServiceUiState()
    }
}

data class CreateServiceUiState(
    val serviceName: String = "",
    val description: String = "",
    val price: Double = 0.0,
    val priceText: String = "",
    val standardWorkUnits: Int = 0,
    val standardWorkUnitsText: String = "",
    val decalTemplateId: String = "",
    val isFormValid: Boolean = false,
    val isLoading: Boolean = false,
    val isSuccess: Boolean = false,
    val error: String? = null
)
